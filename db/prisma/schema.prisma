// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  password String?
  name     String?
  role     UserRole  @default(SCORER)  // Role to differentiate between Scorer and Company
  profile  Scorer?   // No need for fields and references here
  company  Company?  // No need for fields and references here
  accounts Account[]
  sessions Session[]

  @@index([role])
}

enum UserRole {
  SCORER
  COMPANY
}

// Scorer-specific profile data
model Scorer {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique // Reference to User table
  githubUsername  String?  @unique
  leetcodeUsername String? @unique
  linkedinUsername String? @unique
  codeforcesUsername String? @unique
  offersReceived   OfferLetter[] // List of offer letters the scorer has received
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade) // Keep fields and references here
}

model Company {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique // Reference to User table
  linkedinUrl    String?
  websiteUrl     String?
  careerPageUrl  String?
  scorersHired   Int      @default(0) // No. of scorers hired
  offersSent     OfferLetter[]  // Offers sent by the company
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Track offer letters sent by companies to scorers
model OfferLetter {
  id            Int      @id @default(autoincrement())
  scorerId      Int
  companyId     Int
  position      String?  // Optional job position
  status        OfferStatus @default(PENDING)  // Offer status (Pending, Accepted, Rejected)
  createdAt     DateTime @default(now())

  scorer        Scorer   @relation(fields: [scorerId], references: [id], onDelete: Cascade)
  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Session {
  id           Int       @id @default(autoincrement())
  sessionToken String    @unique
  userId       Int
  expires      DateTime

  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user               User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String    @unique
  expires    DateTime

  @@index([token], map: "token_index")
}
